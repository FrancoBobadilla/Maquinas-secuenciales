@startuml

Automata <|-- AFD
Automata <|-- APila
Automata <|-- MTuring

APila o-- Stack : 1..1
Stack o-- Node : 1..*

MTuring o-- Cinta : 1..1
Cinta o-- Celda : 1..*

abstract class Automata {
#nroEstados
#cantActualEstados
#estados
#estadoActual
#estadoInicial

#nroElementosAlfabeto
#cantActualElementosAlfabeto
#alfabeto

#cadenaAnalizar

#automataListo
#tieneEstadoInicial
#tieneEstadoSalida
#tieneEstadosDefinidos
#tieneEntradasDefinidas
#tieneFDeterminada
#tieneCadenaAnalizar
#automataApagado

#virtual setEstadoActual(nombreEstado)
#virtual setAutomataListo() =0
#virtual getExpresionFormal()

#getEstadoIndex(nombreEstado)
#getAlfabetoIndex(elemtoAlfabeto)

+Automata(cantidadEstados, tamanoAlfabeto)
+virtual transicion()=0
+virtual setCadenaAnalizar(string)


+setEstado(nombreEstado, situacionEstado)
+setEstadoInicial(nombreEstado)
+getNombreEstadoInicial()
+getNroEstados()
+getNombreEstadoActual()
+getSituacionEstadoActual()

+setAlfabeto(char)
+getNroElementosAlfabeto()

+isAutomataApagado()
+virtual tipoAutomata()=0;
+virtual expresionFormalLista() =0
+virtual expresionEspecifica() =0;
}

class AFD{
- f
-setAutomataListo() override
-isReadyF()

+ADF(cantidadEstados, tamanoAlfabeto)
+setF(nombreEstadoSalida, entrada, nombreEstadoDestino)
+transicion() override
+expresionFormalLista() override
+tipoAutomata() override
+expresionEspecifica() override
}

class APila{
- f

-pila
-nroElementosAlfabetoPila
-cantActualElementosAlfabetoPila
-alfabetoPila
-finDePila

-tieneSimbolosPilaDefinidos

-getAlfabetoPilaIndex(simboloEntradaPila)
-buscarEstadoFinal
-setAutomataListo() override
-apagarAutomata()

+APila(cantidadEstados, tamanoAlfabeto, tamanoAlfabetoPila)
+setF(nombreEstadoSalida, entrada, valorPila, nombreEstadoDestino, conservarTope, apilamiento)
+transicion() override
+getExpresionFormal() override

+setAlfabetoPila(char)
+getNroElementosAlfabetoPila
+getTopeDePila()

+apagarAutomata();
+expresionFormalLista() override
+tipoAutomata() override
+expresionEspecifica() override
}

class Stack{
-top
+Stack()
+~Stack()
+push(dato)
+pop()
+isEmpty()
}

class Node {
-data
-next
+Node(dato, siguiente)
+Node(dato)
+getData()
+setData(dato)
+getNext()
+setNext(Node)
}

class MTuring{
- f
-cinta
-nroElementosAlfabetoCinta
-cantActualElementosAlfabetoCinta
-alfabetoCinta

-isCabezalListo
-tieneSimbolosCintaDefinidos

-getAlfabetoCintaIndex(simboloEntradaCinta)
-escribirCinta(string)
-setAutomataListo() override

+MTuring(cantidadEstados, tamanoAlfabeto, tamanoAlfabetoCinta)
+setF(nombreEstadoSalida, entrada, valorCinta, nombreEstadoDestino, direccion, escritura)
+transicion() override
+setCadenaAnalizar(string) override

+setAlfabetoCinta(char)
+getNroElementosAlfabetoCinta()
+getCopiaCinta()
+getLecturaCabezal()
+ponerCabezal(position)

+expresionFormalLista() override
+tipoAutomata() override
+expresionEspecifica() override
}


class Cinta{
-cabezal
-blanco
+Cinta(blanco)
+escribir(dato)
+desplazarIzquierda()
+desplazarDerecha()
+leer()
+getBlanco()
+~Cinta()
}

class Celda{
-data
-left
-right
+Celda(dato)
+getData()
+getLeft()
+getRight()
+setLeft(Celda)
+setRight(Celda)
}

@enduml